import { ActorState, ActorStub } from './actor.js';
export type SessionId = string;
export interface AgentMemory {
    getWorkingMemorySession(sessionId: string): Promise<ActorStub<AgentWorkingMemory>>;
    startWorkingMemorySession(): Promise<{
        sessionId: SessionId;
        workingMemory: ActorStub<AgentWorkingMemory>;
    }>;
}
export type WorkingMemoryQuery = {
    timeline?: string;
    key?: string;
    nMostRecent?: number;
    startTime?: Date;
    endTime?: Date;
};
export type NewMemoryEntry = {
    timeline?: string;
    key?: string;
    content: string;
    agent?: string;
    sessionId?: string;
};
export type MemoryEntry = {
    id: string;
    in: SessionId;
    timeline: string;
    by: string;
    dueTo: string;
    content: string;
    at: Date;
    key?: string;
    agent?: string;
};
export type WorkingMemorySearchQuery = {
    timeline?: string;
    terms: string;
    nMostRecent?: number;
    startTime?: Date;
    endTime?: Date;
};
export interface AgentWorkingMemory {
    state: ActorState;
    env: unknown;
    endSession(flush: boolean): Promise<void>;
    getMemory(entry: WorkingMemoryQuery): Promise<MemoryEntry[] | null>;
    searchMemory(terms: WorkingMemorySearchQuery): Promise<MemoryEntry[] | null>;
    putMemory(entry: NewMemoryEntry): Promise<string>;
    deleteMemory(entryId: string): Promise<void>;
    summarizeMemory(memories: MemoryEntry[], systemPrompt?: string): Promise<{
        summary: string;
        entries: Record<string, MemoryEntry[]>;
        metadata: {
            duration: number;
            timelineCount: number;
            entryCount: number;
            agent: string;
        };
    }>;
}
//# sourceMappingURL=agent_memory.d.ts.map